pipeline {
	options {
		buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '10'))
		disableConcurrentBuilds()
		disableResume()
		copyArtifactPermission('/Lumos Installer (Pipeline)/*');
	}
	agent {
		node{
			label 'Win10'
		}
	}	
	environment {
		//  Define the VisualStudio tools
		MSBuild = tool 'MSBuild VS 2022'
		VSTestConsole = tool 'VSTest VS 2022'
		
		//  Define the additional tools
		CLOC = tool 'CLOC_current'
		OpenCover = tool 'OpenCover_current'
		ReportGenerator = tool 'ReportGenerator_current'
	}
	triggers {
		//  Trigger, when Lumos build was successful
		upstream ( 
		   threshold: hudson.model.Result.SUCCESS, 
		   upstreamProjects: "/Lumos (Pipeline)/" + env.BRANCH_NAME.replaceAll("/", "%2F") 
		)
	}
	stages{
		stage('Copy Artefacts of other Jobs'){
			steps {
				//  Fetch all needed artifacts
				script{
					try {
						println('Copy Kernel artefacts from Job \"Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F") + '\"')
						copyArtifacts(projectName: 'Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F"), flatten: true, filter: 'Lumos/bin/Release/net6.0/*', target: 'dep');
					} catch (hudson.AbortException e) {
						println('Job \"Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F") + '\" does not exist. Copy from default Job')
						copyArtifacts(projectName: 'Lumos (Pipeline)/master', flatten: true, filter: 'Lumos/bin/Release/net6.0/*', target: 'dep');
					}
					try {
						println('Copy GUI artefacts from Job \"Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F") + '\"')
						copyArtifacts(projectName: 'Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F"), flatten: true, filter: 'LumosGUI/bin/Release/*', target: 'dep');
					} catch (hudson.AbortException e) {
						println('Job \"Lumos (Pipeline)/' + env.BRANCH_NAME.replaceAll("/", "%2F") + '\" does not exist. Copy from default Job')
						copyArtifacts(projectName: 'Lumos (Pipeline)/master', flatten: true, filter: 'LumosGUI/bin/Release/*', target: 'dep');
					}
				}
			}
		}
		stage('Count Lines of Code'){
			steps {
				//  Run the tool to count the code lines
				bat "\"${CLOC}\" --by-file --xml --out=CountLinesOfCode/CLOCReport.xml --exclude-dir=Dependencies --include-lang=C# ."
			}
		}
		stage('Build Debug Configuration'){
			steps {
				//  First update all nuget packages in the branch
				bat 'nuget restore Nanoleaf-Plugin.sln'
				
				//  Then add the current build number in the version number and build the branch
				changeAsmVer versionPattern: '$BUILD_NUMBER', regexPattern: '(Assembly(.*)Version\\("(.+)\\.(.+)\\.(.+)\\.(.+)")', replacementPattern: 'Assembly\$2Version("\$3.\$4.\$5.%s"'
				bat "\"${MSBuild}\" Nanoleaf-Plugin.sln /p:Configuration=Debug /t:Clean;Rebuild /p:Platform=\"Any CPU\";PreBuildEvent=;PostBuildEvent= "
			}
		}
		stage('Build Release Configuration'){
			steps {
				script {
					//  Build the release configuration of the project
					bat "\"${MSBuild}\" Nanoleaf-Plugin.sln /p:Configuration=Release /t:Clean;Rebuild /p:Platform=\"Any CPU\";PreBuildEvent=;PostBuildEvent= "
				}
			}
		}
		stage('Archive Artifacts'){
			steps {
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\Nanoleaf-Plugin.dll\" \"$WORKSPACE\\Releases\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\Nanoleaf-Plugin.pdb\" \"$WORKSPACE\\Releases\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\Newtonsoft.Json.dll\" \"$WORKSPACE\\Releases\\dependencies\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\RestSharp.dll\" \"$WORKSPACE\\Releases\\dependencies\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\System.Text.Encodings.Web.dll\" \"$WORKSPACE\\Releases\\dependencies\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\Nanoleaf-Plugin\\bin\\Release\\net6.0\\System.Text.Json.dll\" \"$WORKSPACE\\Releases\\dependencies\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\NanoleafGUI-Plugin\\bin\\Release\\net48\\NanoleafGUI-Plugin.dll\" \"$WORKSPACE\\Releases\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\NanoleafGUI-Plugin\\bin\\Release\\net48\\NanoleafGUI-Plugin.pdb\" \"$WORKSPACE\\Releases\\\" /F /R /Y /I"
				bat "xcopy \"$WORKSPACE\\NanoleafGUI-Plugin\\bin\\Release\\net48\\System.ComponentModel.Annotations.dll\" \"$WORKSPACE\\Releases\\dependencies\\\" /F /R /Y /I"
				
				archiveArtifacts artifacts: 'Releases/Nanoleaf-Plugin.dll, Releases/Nanoleaf-Plugin.pdb, Releases/dependencies/Newtonsoft.Json.dll, Releases/dependencies/RestSharp.dll, Releases/dependencies/System.Text.Encodings.Web.dll, Releases/dependencies/System.Text.Json.dll, Releases/NanoleafGUI-Plugin.dll, Releases/NanoleafGUI-Plugin.pdb, Releases/dependencies/System.ComponentModel.Annotations.dll'
			}			
		}
	}
	post {
		always {
		    // Publish the log of the build process
			sloccountPublish encoding: 'UTF-8', pattern: 'CountLinesOfCode/CLOCReport.xml'
			
			recordIssues tool: msBuild()
		}
		success {
			//  Run the post build processes only, if the build was a success because the the following step needs the output of the jobs so far
			recordIssues tool: taskScanner(highTags:'FIXME', normalTags:'TODO', includePattern: '**/*.cs', IgnoreCase: true)
		}
	}
}